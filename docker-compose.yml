version: '3.7'
services:
  web:
    build:
      context: ./services/web
    container_name: web
    environment:
        POSTGRES_CONN: "server=localhost;user=$POSTGRES_USER"
    env_file:
      - ./.env
    expose:
      - 5000
    volumes:
      - ./configs/web.py:/config.py
    command: ["web/wait-for-it.sh","${DB_HOST}:${DB_PORT}", "--",
              "/usr/local/bin/gunicorn", "--worker-class", "eventlet",
              "web.app:app", "-w", "1", "-t", "90", "-b", "0.0.0.0:5000"
              ]

  task-executor:
    build:
      context: ./services/postgres-worker
    container_name: postgres-worker
    env_file:
      - ./.env
    command: python -m app

  data-registrator:
    build:
      context: ./services/data-registrator
    container_name: data-registrator
    env_file:
      - ./.env
    command: python -m app

  state-machine:
    build:
      context: ./services/state-machine
    container_name: state-machine
    env_file:
      - ./.env
    command: celery -A common.resources.celery worker --loglevel=info

  frontend:
    build:
      context: ./services/frontend
    container_name: frontend
    depends_on:
      - web
    expose:
      - 8008
    command: sh -c "yarn build && yarn start-prod"

  nginx:
    image: nginx:latest
    container_name: nginx  
    ports:
      - 80:80
    volumes:
      - ./configs/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./services/frontend/app/404.html:/etc/nginx/404.html
      - ./services/frontend/app/404.html:/usr/share/nginx/html/404.html
    depends_on:
      - web
      - data-registrator
      - postgres-worker
      - frontend

volumes:
  redis_data:
  postgres-data:
  #mongo-data:
